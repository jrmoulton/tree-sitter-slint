================================================================================
Import statement
================================================================================

import { Button } from "std-widgets.slint";

--------------------------------------------------------------------------------

(source_file
  (import_statement
    (type_identifier)
    (string_literal)))

================================================================================
Global Singleton
================================================================================

global Palette := {
    property<color> primary: blue;
}

--------------------------------------------------------------------------------

(source_file
  (global_single
    (type_identifier)
    (define_assign_property
      (type_identifier)
      (identifier)
      (identifier))))

================================================================================
Export statement
================================================================================

export { MathLogic }

--------------------------------------------------------------------------------

(source_file
  (export_statement
    (vis)
    (type_identifier)))

================================================================================
Export as  statement
================================================================================

export { Button as ColorButton }

--------------------------------------------------------------------------------

(source_file
  (export_statement
    (vis)
    (type_identifier)
    (type_identifier)))

================================================================================
More complicated conditional statement
================================================================================

example := Rectangle {
    clicked => {
        if (condition) {
            foo = 42;
        } else if (other-condition) {
            bar = 28;
        } else {
            foo = 4;
        }
    }
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (callback_event
          (function_identifier)
          (field_declaration_list
            (field_declaration_list_body
              (if_statement_definition
                (expression_body_paren
                  (var_identifier))
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (int_number)))))))
              (if_statement_definition
                (expression_body_paren
                  (var_identifier))
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (int_number)))))))
              (if_statement_definition
                (field_declaration_list
                  (field_declaration_list_body
                    (variable_set_equal
                      (var_identifier)
                      (assignment_prec_operator)
                      (value
                        (number
                          (int_number))))))))))))))

================================================================================
For-in statement
================================================================================

Example := Window {
    for my-color[index] in [ #e11, #1a2, #23d ]: Rectangle {
        background: my-color;
    }
}

--------------------------------------------------------------------------------

))))))

================================================================================
For-in statement with anonymous struct as property
================================================================================

Example := Window {
    property <[{foo: string, col: color}]> model: [
        {foo: "abc", col: #f00 },
        {foo: "def", col: #00f },
    ];
    VerticalLayout {
        for data in root.model: my-repeated-text := Text {
            color: data.col;
            text: data.foo;
        }
    }
}

--------------------------------------------------------------------------------

))))))

================================================================================
Animation statement
================================================================================

Example := Window {
    animate background {
        duration: 250ms;
    }
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (animate_statement
          (var_identifier)
          (animate_declaration_list
            (builtin_type_identifier)
            (value
              (value_with_units
                (number
                  (int_number))
                (unit_type)))))))))

================================================================================
Animate two variables together statement
================================================================================


Example := Window {
    animate x, y { duration: 100ms; }
}

--------------------------------------------------------------------------------

))))))

================================================================================
State statement
================================================================================


Example := Window {
    states [
        disabled when !is-enabled : {
            background: gray;
        }
        down when pressed : {
            background: blue;
        }
    ]
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (states_definition
          (states_list_definition
            (state_identifier)
            (unary_expression
              (unary_prec_operator)
              (var_identifier))
            (field_declaration_list
              (field_declaration_list_body
                (variable_set_equal
                  (var_identifier)
                  (assignment_prec_operator)
                  (var_identifier))))
            (state_identifier)
            (var_identifier)
            (field_declaration_list
              (field_declaration_list_body
                (variable_set_equal
                  (var_identifier)
                  (assignment_prec_operator)
                  (value
                    (language_constant)))))))))))

================================================================================
Transition statement
================================================================================


Example := Window {
    transitions [
        in down : {
            animate color { duration: 300ms; }
        }
        out disabled : {
            animate * { duration: 800ms; }
        }
    ]
}

--------------------------------------------------------------------------------

(source_file
  (component_definition
    (user_type_identifier)
    (user_type_identifier)
    (field_declaration_list
      (field_declaration_list_body
        (transitions_definition
          (transitions_list_definition
            (var_identifier)
            (field_declaration_list
              (field_declaration_list_body
                (animate_statement
                  (var_identifier)
                  (animate_declaration_list
                    (builtin_type_identifier)
                    (value
                      (value_with_units
                        (number
                          (int_number))
                        (unit_type)))))))
            (var_identifier)
            (field_declaration_list
              (field_declaration_list_body
                (animate_statement
                  (var_identifier)
                  (animate_declaration_list
                    (builtin_type_identifier)
                    (value
                      (value_with_units
                        (number
                          (int_number))
                        (unit_type)))))))))))))
